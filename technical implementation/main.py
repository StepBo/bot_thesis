
import os
import json
from telegram import Bot, Update, ReplyKeyboardMarkup
from storage.state import get_user_state, save_user_state
from handlers.theory import send_theory
from handlers.practice import send_quest, handle_quest
from loader.modules import load_theory_modules, load_practice_modules, load_tutorial

bot = Bot(token=os.environ["BOT_TOKEN"])
theory_modules = load_theory_modules()
practice_modules = load_practice_modules()
TUTORIAL_TEXT = load_tutorial()

WELCOME_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏–π –±–æ—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏!\n\n"
    "üìå –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
    "‚Äî –∏–∑—É—á–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤–∞–∂–Ω–µ–π—à–∏–º —Ç–µ–º–∞–º;\n"
    "‚Äî –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π.\n\n"
    "‚ö†Ô∏è –ü—Ä–æ—Ö–æ–¥—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–º –≤–∏–¥–µ. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —É—á–µ–±–Ω—ã—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.\n\n"
    "üëá –í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:"
)

async def handler(event, context):
    body = json.loads(event.get("body", "{}"))
    update = Update.de_json(body, bot)
    message = body.get("message") or body.get("edited_message")

    if not message:
        return {"statusCode": 200, "body": "No message found"}

    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "").strip()
    if not chat_id or not text:
        return {"statusCode": 200, "body": "Empty chat_id or text"}

    state = get_user_state(str(chat_id)) or {}

    if text == "/start" or text == "üè† –í –º–µ–Ω—é":
        state.clear()
        await bot.send_message(
            chat_id,
            WELCOME_TEXT,
            reply_markup=ReplyKeyboardMarkup(
                [["üìö –¢–µ–æ—Ä–∏—è", "üß© –ü—Ä–∞–∫—Ç–∏–∫–∞", "üìñ –¢—É—Ç–æ—Ä–∏–∞–ª"]],
                resize_keyboard=True
            )
        )

    elif text == "üìö –¢–µ–æ—Ä–∏—è":
        await bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:",
            reply_markup=ReplyKeyboardMarkup(
                [[f"–ú–æ–¥—É–ª—å {i}" for i in range(1, 5)],
                 [f"–ú–æ–¥—É–ª—å {i}" for i in range(5, 9)],
                 ["üè† –í –º–µ–Ω—é"]],
                resize_keyboard=True
            )
        )

    elif text == "üß© –ü—Ä–∞–∫—Ç–∏–∫–∞":
        await bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:",
            reply_markup=ReplyKeyboardMarkup(
                [[f"–ö–≤–µ—Å—Ç {i}" for i in range(1, 5)],
                 [f"–ö–≤–µ—Å—Ç {i}" for i in range(5, 9)],
                 ["üè† –í –º–µ–Ω—é"]],
                resize_keyboard=True
            )
        )

    elif text == "üìñ –¢—É—Ç–æ—Ä–∏–∞–ª":
        await bot.send_message(
            chat_id,
            TUTORIAL_TEXT,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([["üè† –í –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text.startswith("–ú–æ–¥—É–ª—å"):
        try:
            module_number = int(text.split()[-1])
            state["theory_module"] = module_number
            state["theory_index"] = 0
            await send_theory(bot, chat_id, state, theory_modules)
        except ValueError:
            await bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è.")

    elif text.lower() == "–¥–∞–ª–µ–µ":
        await send_theory(bot, chat_id, state, theory_modules)

    elif text.startswith("–ö–≤–µ—Å—Ç"):
        try:
            mod_num = int(text.split()[-1])
            if mod_num in practice_modules:
                state["quest"] = "1"
                state["quest_module"] = mod_num
                await send_quest(bot, chat_id, state, practice_modules)
            else:
                await bot.send_message(chat_id, "–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–µ—Å—Ç–∞.")

    elif text == "‚û°Ô∏è –î–∞–ª–µ–µ":
        state["quest"] = state.pop("next_after", "1")
        await send_quest(bot, chat_id, state, practice_modules)

    else:
        await handle_quest(bot, chat_id, text, state, practice_modules)

    save_user_state(str(chat_id), state)
    return {"statusCode": 200}
